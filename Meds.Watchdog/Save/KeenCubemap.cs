using System;
using System.Numerics;

namespace Meds.Watchdog.Save
{
    public static class KeenCubemap
    {
        // From Keen's MyEnvironmentCubemapHelper
        private static readonly Quaternion[] FaceOrientations = new[]
        {
            new Quaternion(0, 0, 1, 0),
            new Quaternion(1, 0, 0, 0),
            new Quaternion(0.7071068f, 0, -0.7071068f, 0),
            new Quaternion(0.7071068f, 0, 0.7071068f, 0),
            new Quaternion(0, -0.7071068f, 0.7071068f, 0),
            new Quaternion(-0.7071068f, 0, 0, 0.7071068f),
        };

        public static Vector2 ProjectToCubemap(Vector3 pos, out int direction)
        {
            var abs = Vector3.Abs(pos);
            var uv = new Vector2();
            if (abs.X > abs.Y)
            {
                if (abs.X > abs.Z)
                {
                    pos /= abs.X;
                    uv.Y = -pos.Y;
                    if (pos.X > 0.0)
                    {
                        uv.X = -pos.Z;
                        direction = 2;
                    }
                    else
                    {
                        uv.X = pos.Z;
                        direction = 3;
                    }
                }
                else
                {
                    pos /= abs.Z;
                    uv.Y = -pos.Y;
                    if (pos.Z > 0.0)
                    {
                        uv.X = pos.X;
                        direction = 1;
                    }
                    else
                    {
                        uv.X = -pos.X;
                        direction = 0;
                    }
                }
            }
            else if (abs.Y > abs.Z)
            {
                pos /= abs.Y;
                uv.Y = -pos.Z;
                if (pos.Y > 0.0)
                {
                    uv.X = -pos.X;
                    direction = 4;
                }
                else
                {
                    uv.X = pos.X;
                    direction = 5;
                }
            }
            else
            {
                pos /= abs.Z;
                uv.Y = -pos.Y;
                if (pos.Z > 0.0)
                {
                    uv.X = pos.X;
                    direction = 1;
                }
                else
                {
                    uv.X = -pos.X;
                    direction = 0;
                }
            }

            uv.X = ProjectionToUniform(uv.X);
            uv.Y = ProjectionToUniform(uv.Y);
            return uv;
        }

        public static Vector3 UnProjectFromCubemap(Vector2 uv, int direction)
        {
            uv.X = UniformToProjection(uv.X);
            uv.Y = UniformToProjection(uv.Y);
            var relative = Vector3.Normalize(new Vector3(uv, -1));
            return Vector3.Transform(relative, FaceOrientations[direction]);
        }


        // From Keen's MyCubemapHelper
        private static readonly float[] Uni2ProjTable = new[]
        {
            -1f,
            -0.9877553f,
            -0.9756587f,
            -0.9637067f,
            -0.95189565f,
            -0.9402224f,
            -0.9286836f,
            -0.91727597f,
            -0.9059966f,
            -0.89484245f,
            -0.8838105f,
            -0.87289816f,
            -0.86210245f,
            -0.8514208f,
            -0.84085065f,
            -0.83038944f,
            -0.8200347f,
            -0.80978405f,
            -0.7996352f,
            -0.7895857f,
            -0.77963364f,
            -0.76977664f,
            -0.7600127f,
            -0.75033975f,
            -0.7407558f,
            -0.7312589f,
            -0.72184724f,
            -0.7125189f,
            -0.70327204f,
            -0.69410497f,
            -0.685016f,
            -0.67600334f,
            -0.66706544f,
            -0.65820074f,
            -0.6494076f,
            -0.64068455f,
            -0.63203007f,
            -0.62344277f,
            -0.6149211f,
            -0.6064638f,
            -0.5980694f,
            -0.5897367f,
            -0.5814643f,
            -0.5732509f,
            -0.56509537f,
            -0.55699635f,
            -0.54895276f,
            -0.5409634f,
            -0.53302705f,
            -0.52514267f,
            -0.5173092f,
            -0.5095254f,
            -0.5017904f,
            -0.494103f,
            -0.4864623f,
            -0.47886723f,
            -0.47131687f,
            -0.4638102f,
            -0.4563463f,
            -0.44892427f,
            -0.44154316f,
            -0.4342021f,
            -0.4269002f,
            -0.4196366f,
            -0.41241047f,
            -0.40522096f,
            -0.39806724f,
            -0.39094853f,
            -0.38386402f,
            -0.37681293f,
            -0.3697945f,
            -0.36280796f,
            -0.3558526f,
            -0.34892768f,
            -0.34203243f,
            -0.3351662f,
            -0.32832825f,
            -0.3215179f,
            -0.3147345f,
            -0.30797732f,
            -0.30124575f,
            -0.29453912f,
            -0.2878568f,
            -0.28119808f,
            -0.27456242f,
            -0.26794916f,
            -0.26135772f,
            -0.25478745f,
            -0.24823777f,
            -0.2417081f,
            -0.23519784f,
            -0.22870643f,
            -0.22223327f,
            -0.21577781f,
            -0.2093395f,
            -0.20291777f,
            -0.19651201f,
            -0.1901218f,
            -0.18374655f,
            -0.1773857f,
            -0.17103875f,
            -0.16470514f,
            -0.15838438f,
            -0.15207595f,
            -0.14577931f,
            -0.13949399f,
            -0.13321945f,
            -0.1269552f,
            -0.12070075f,
            -0.11445558f,
            -0.108219214f,
            -0.10199116f,
            -0.09577093f,
            -0.08955803f,
            -0.083351985f,
            -0.077152304f,
            -0.07095852f,
            -0.06477015f,
            -0.058586705f,
            -0.05240773f,
            -0.04623274f,
            -0.04006127f,
            -0.03389284f,
            -0.02772699f,
            -0.021563243f,
            -0.015401133f,
            -0.009240194f,
            -0.0030799555f,
            0.003080049f,
            0.009240287f,
            0.015401227f,
            0.021563336f,
            0.027727082f,
            0.033892933f,
            0.040061362f,
            0.046232834f,
            0.052407824f,
            0.058586798f,
            0.06477024f,
            0.070958614f,
            0.0771524f,
            0.08335208f,
            0.089558125f,
            0.09577102f,
            0.10199126f,
            0.10821931f,
            0.11445568f,
            0.120700836f,
            0.1269553f,
            0.13321954f,
            0.13949408f,
            0.14577942f,
            0.15207604f,
            0.15838447f,
            0.16470523f,
            0.17103884f,
            0.17738579f,
            0.18374664f,
            0.1901219f,
            0.1965121f,
            0.20291781f,
            0.20933954f,
            0.21577786f,
            0.22223333f,
            0.22870648f,
            0.2351979f,
            0.24170816f,
            0.24823783f,
            0.2547875f,
            0.26135778f,
            0.26794922f,
            0.27456248f,
            0.28119814f,
            0.28785682f,
            0.29453918f,
            0.3012458f,
            0.30797738f,
            0.31473455f,
            0.32151797f,
            0.3283283f,
            0.33516625f,
            0.3420325f,
            0.34892774f,
            0.35585266f,
            0.36280802f,
            0.36979455f,
            0.37681296f,
            0.38386407f,
            0.39094856f,
            0.3980673f,
            0.40522102f,
            0.41241053f,
            0.41963676f,
            0.42690036f,
            0.43420225f,
            0.44154334f,
            0.44892445f,
            0.45634648f,
            0.46381038f,
            0.47131705f,
            0.4788674f,
            0.48646247f,
            0.4941032f,
            0.5017905f,
            0.5095256f,
            0.51730937f,
            0.52514285f,
            0.53302723f,
            0.54096353f,
            0.5489529f,
            0.55699646f,
            0.5650955f,
            0.573251f,
            0.5814644f,
            0.5897368f,
            0.59806955f,
            0.6064639f,
            0.6149213f,
            0.6234429f,
            0.63203025f,
            0.64068466f,
            0.64940774f,
            0.65820086f,
            0.66706556f,
            0.67600346f,
            0.6850161f,
            0.6941051f,
            0.70327216f,
            0.712519f,
            0.72184736f,
            0.73125905f,
            0.7407559f,
            0.75033987f,
            0.7600128f,
            0.76977676f,
            0.77963376f,
            0.7895859f,
            0.7996353f,
            0.8097842f,
            0.82003486f,
            0.8303896f,
            0.84085083f,
            0.851421f,
            0.8621026f,
            0.8728983f,
            0.8838107f,
            0.8948426f,
            0.9059968f,
            0.91727614f,
            0.9286837f,
            0.94022256f,
            0.95189583f,
            0.96370685f,
            0.9756589f,
            0.9877555f,
            1f,
            1f
        };

        private static readonly float[] Proj2UniTable = new[]
        {
            -1f,
            -0.99498725f,
            -0.98993504f,
            -0.9848431f,
            -0.97971106f,
            -0.9745386f,
            -0.9693255f,
            -0.96407133f,
            -0.9587759f,
            -0.9534389f,
            -0.94805986f,
            -0.94263875f,
            -0.93717504f,
            -0.9316685f,
            -0.9261189f,
            -0.9205259f,
            -0.9148892f,
            -0.90920854f,
            -0.9034835f,
            -0.8977141f,
            -0.8918997f,
            -0.8860402f,
            -0.8801353f,
            -0.8741847f,
            -0.8681883f,
            -0.86214566f,
            -0.85605645f,
            -0.8499206f,
            -0.8437377f,
            -0.8375077f,
            -0.83123016f,
            -0.8249049f,
            -0.8185319f,
            -0.81211054f,
            -0.8056409f,
            -0.79912263f,
            -0.7925556f,
            -0.78593963f,
            -0.7792745f,
            -0.77255994f,
            -0.76579595f,
            -0.75898224f,
            -0.7521187f,
            -0.7452052f,
            -0.73824155f,
            -0.7312276f,
            -0.72416335f,
            -0.71704865f,
            -0.70988333f,
            -0.7026675f,
            -0.69540083f,
            -0.6880834f,
            -0.68071526f,
            -0.6732962f,
            -0.66582626f,
            -0.65830547f,
            -0.6507338f,
            -0.64311135f,
            -0.6354381f,
            -0.62771404f,
            -0.6199393f,
            -0.612114f,
            -0.6042382f,
            -0.59631205f,
            -0.58833563f,
            -0.58030915f,
            -0.5722327f,
            -0.5641066f,
            -0.555931f,
            -0.547706f,
            -0.539432f,
            -0.5311092f,
            -0.5227379f,
            -0.51431847f,
            -0.50585115f,
            -0.49733633f,
            -0.4887743f,
            -0.4801655f,
            -0.4715104f,
            -0.46280935f,
            -0.45406282f,
            -0.4452713f,
            -0.43643528f,
            -0.42755526f,
            -0.41863182f,
            -0.40966552f,
            -0.40065688f,
            -0.39160657f,
            -0.38251522f,
            -0.3733835f,
            -0.36421198f,
            -0.35500148f,
            -0.3457527f,
            -0.33646628f,
            -0.3271431f,
            -0.31778392f,
            -0.30838946f,
            -0.2989607f,
            -0.2894984f,
            -0.28000346f,
            -0.27047676f,
            -0.2609192f,
            -0.25133175f,
            -0.24171531f,
            -0.2320709f,
            -0.22239946f,
            -0.21270204f,
            -0.20297964f,
            -0.19323331f,
            -0.18346412f,
            -0.1736731f,
            -0.1638614f,
            -0.15403007f,
            -0.14418025f,
            -0.13431308f,
            -0.12442968f,
            -0.11453122f,
            -0.10461886f,
            -0.09469377f,
            -0.084757134f,
            -0.074810155f,
            -0.064854026f,
            -0.05488995f,
            -0.04491914f,
            -0.03494282f,
            -0.024962205f,
            -0.014978521f,
            -0.0049929945f,
            0.0049931463f,
            0.014978672f,
            0.024962356f,
            0.034942973f,
            0.044919293f,
            0.0548901f,
            0.064854175f,
            0.07481031f,
            0.08475729f,
            0.09469392f,
            0.104619004f,
            0.114531375f,
            0.12442984f,
            0.13431323f,
            0.1441804f,
            0.15403022f,
            0.16386153f,
            0.17367326f,
            0.18346424f,
            0.19323345f,
            0.20297979f,
            0.21270218f,
            0.2223996f,
            0.23207104f,
            0.24171546f,
            0.2513319f,
            0.26091936f,
            0.2704769f,
            0.2800036f,
            0.28949857f,
            0.29896083f,
            0.3083896f,
            0.317784f,
            0.3271432f,
            0.33646634f,
            0.34575275f,
            0.35500154f,
            0.36421207f,
            0.37338352f,
            0.38251528f,
            0.39160666f,
            0.40065697f,
            0.40966555f,
            0.41863188f,
            0.42755535f,
            0.43643534f,
            0.44527137f,
            0.45406288f,
            0.4628094f,
            0.47151047f,
            0.4801656f,
            0.48877436f,
            0.49733636f,
            0.5058512f,
            0.5143186f,
            0.52273804f,
            0.5311093f,
            0.53943205f,
            0.54770607f,
            0.555931f,
            0.56410664f,
            0.5722328f,
            0.5803092f,
            0.5883357f,
            0.5963122f,
            0.6042384f,
            0.6121142f,
            0.6199395f,
            0.6277142f,
            0.63543826f,
            0.6431116f,
            0.65073407f,
            0.6583057f,
            0.66582644f,
            0.6732964f,
            0.6807154f,
            0.6880836f,
            0.695401f,
            0.70266765f,
            0.7098836f,
            0.7170488f,
            0.72416353f,
            0.73122776f,
            0.7382416f,
            0.7452053f,
            0.7521188f,
            0.7589823f,
            0.765796f,
            0.77256006f,
            0.7792746f,
            0.7859397f,
            0.79255575f,
            0.79912275f,
            0.80564094f,
            0.8121106f,
            0.8185319f,
            0.82490504f,
            0.8312302f,
            0.8375078f,
            0.84373784f,
            0.8499207f,
            0.8560565f,
            0.8621457f,
            0.8681884f,
            0.8741849f,
            0.8801354f,
            0.8860403f,
            0.89189976f,
            0.89771414f,
            0.9034836f,
            0.9092086f,
            0.9148893f,
            0.92052597f,
            0.926119f,
            0.93166864f,
            0.9371751f,
            0.9426388f,
            0.9480599f,
            0.95343894f,
            0.95877594f,
            0.9640714f,
            0.9693256f,
            0.9745387f,
            0.9797111f,
            0.98484313f,
            0.98993516f,
            0.99498737f,
            1f,
            1f
        };

        public static float ProjectionToUniform(float x)
        {
            if (-1.0 >= x)
                return -1f;
            if (x > 1.0)
                return 1f;
            x = (float)((x + 1.0) * byte.MaxValue / 2.0);
            var index = (int)x;
            var left = Proj2UniTable[index];
            var right = Proj2UniTable[index + 1];
            return left + (float)((x - (double)index) * (right - (double)left));
        }

        public static float UniformToProjection(float x)
        {
            if (-1.0 >= x)
                return -1f;
            if (x > 1.0)
                return 1f;
            x = (float)((x + 1.0) * byte.MaxValue / 2.0);
            var index = (int)x;
            var left = Uni2ProjTable[index];
            var right = Uni2ProjTable[index + 1];
            return left + (float)((x - (double)index) * (right - (double)left));
        }
    }
}