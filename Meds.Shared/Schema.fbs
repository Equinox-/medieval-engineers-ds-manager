namespace Meds.Shared.Data;

table HealthState {
    liveness: bool;
    readiness: bool;
}

table ShutdownRequest {}

// Logging
enum LogSeverity: byte {
    Debug,
    Info,
    Warning,
    Error,
    Critical,
    PreFormatted,
}

struct Int64LogArg { value: int64; }
struct Float64LogArg { value: float64; }
table StringLogArg { value: string; }
table ExceptionLogArg {
    type: string;
    message: string;
    stack: string;
}

union LogArg {
    String: StringLogArg,
    Int64: Int64LogArg,
    Float64: Float64LogArg,
    Exception: ExceptionLogArg
}

table DefinitionContext {
    type: string;
    subtype: string;
    package: string;
}

table EntityComponentContext {
    entity: uint64;
    type: string;
    definition: DefinitionContext;
}

table SceneComponentContext {
    type: string;
    definition: DefinitionContext;
}

union LogContext {
    DefinitionContext,
    EntityComponentContext,
    SceneComponentContext
}

table StructuredLogMessage {
    time_ms: int64;
    origin: string;
    format: string;
    thread: string;
    severity: LogSeverity;
    args: [LogArg];
    context: LogContext;
}

// Metrics
table HistogramMetricData {
    min: double;
    mean: double;
    p50: double;
    p75: double;
    p90: double;
    p95: double;
    p98: double;
    p99: double;
    p999: double;
    max: double;
    std_dev: double;
    count: int64;
}

table GaugeMetricData {
    name: string;
    value: double;
}

table CounterMetricData {
    name: string;
    value: int64;
}

union LeafMetricData {
    GaugeMetricData,
    CounterMetricData,
}

table CompositeMetricData {
    metrics: [LeafMetricData];
}

union MetricGroupData {
    HistogramMetricData,
    CompositeMetricData
}

table MetricMessage {
    prefix: string;
    tag_key_val: [string];
    data: MetricGroupData;
    time_ms: int64;
}

union Message {
    HealthState,
    StructuredLogMessage,
    ShutdownRequest,
    MetricMessage,
}

table Packet {
    data: [Message];
}

root_type Packet;